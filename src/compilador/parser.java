
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Apr 21 22:40:49 VET 2015
//----------------------------------------------------

package compilador;

import java_cup.runtime.*;
import ast.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Apr 21 22:40:49 VET 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\003\000\002\002\004\000\002\003" +
    "\007\000\002\003\006\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\022\016\000" +
    "\002\022\015\000\002\023\013\000\002\023\012\000\002" +
    "\024\006\000\002\024\004\000\002\005\005\000\002\005" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\007\010\000\002\007\013\000\002\010" +
    "\007\000\002\011\015\000\002\012\005\000\002\012\005" +
    "\000\002\021\006\000\002\021\005\000\002\013\004\000" +
    "\002\014\004\000\002\016\007\000\002\015\004\000\002" +
    "\017\005\000\002\017\003\000\002\020\005\000\002\020" +
    "\003\000\002\026\005\000\002\026\005\000\002\026\003" +
    "\000\002\025\005\000\002\025\005\000\002\025\005\000" +
    "\002\025\005\000\002\025\005\000\002\025\005\000\002" +
    "\025\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\031\005\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\010\004\012\005\013\014\006\001\002\000" +
    "\004\002\235\001\002\000\010\004\012\005\013\014\227" +
    "\001\002\000\022\003\041\004\034\006\035\015\047\016" +
    "\045\021\030\022\036\023\037\001\002\000\010\004\ufffa" +
    "\005\ufffa\014\ufffa\001\002\000\004\002\001\001\002\000" +
    "\010\004\ufffb\005\ufffb\014\ufffb\001\002\000\004\023\201" +
    "\001\002\000\004\023\014\001\002\000\004\042\015\001" +
    "\002\000\006\004\020\043\016\001\002\000\004\014\175" +
    "\001\002\000\006\043\022\046\023\001\002\000\004\023" +
    "\021\001\002\000\006\043\ufff4\046\ufff4\001\002\000\004" +
    "\014\026\001\002\000\004\004\024\001\002\000\004\023" +
    "\025\001\002\000\006\043\ufff5\046\ufff5\001\002\000\022" +
    "\003\041\004\034\006\035\015\047\016\045\021\030\022" +
    "\036\023\037\001\002\000\004\047\uffef\001\002\000\004" +
    "\023\174\001\002\000\004\047\uffea\001\002\000\004\047" +
    "\uffec\001\002\000\004\047\ufff1\001\002\000\004\023\165" +
    "\001\002\000\016\003\065\007\062\010\063\023\064\024" +
    "\056\042\070\001\002\000\016\003\065\007\062\010\063" +
    "\023\064\024\056\042\070\001\002\000\006\025\136\042" +
    "\142\001\002\000\004\047\151\001\002\000\004\047\uffe8" +
    "\001\002\000\004\047\ufff0\001\002\000\004\047\uffee\001" +
    "\002\000\004\047\uffeb\001\002\000\004\042\123\001\002" +
    "\000\004\047\uffe9\001\002\000\022\003\041\004\034\006" +
    "\035\015\047\016\045\021\030\022\036\023\037\001\002" +
    "\000\004\047\uffed\001\002\000\004\047\ufff2\001\002\000" +
    "\004\047\053\001\002\000\024\003\041\004\034\006\035" +
    "\015\047\016\045\017\054\021\030\022\036\023\037\001" +
    "\002\000\016\003\065\007\062\010\063\023\064\024\056" +
    "\042\070\001\002\000\004\047\ufff3\001\002\000\044\011" +
    "\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6" +
    "\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040\uffc6\041\uffc6\043" +
    "\uffc6\045\uffc6\046\uffc6\047\uffc6\001\002\000\004\047\uffe5" +
    "\001\002\000\044\011\uffcb\026\uffcb\027\uffcb\030\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb" +
    "\040\106\041\105\043\uffcb\045\uffcb\046\uffcb\047\uffcb\001" +
    "\002\000\020\011\uffd5\034\117\035\120\043\uffd5\045\uffd5" +
    "\046\uffd5\047\uffd5\001\002\000\044\011\uffc5\026\uffc5\027" +
    "\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5" +
    "\036\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5\045\uffc5\046" +
    "\uffc5\047\uffc5\001\002\000\044\011\uffc4\026\uffc4\027\uffc4" +
    "\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\041\uffc4\043\uffc4\045\uffc4\046\uffc4" +
    "\047\uffc4\001\002\000\044\011\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\043\uffc3\045\uffc3\046\uffc3\047" +
    "\uffc3\001\002\000\044\011\uffc2\026\uffc2\027\uffc2\030\uffc2" +
    "\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037" +
    "\uffc2\040\uffc2\041\uffc2\043\uffc2\045\uffc2\046\uffc2\047\uffc2" +
    "\001\002\000\044\011\uffc8\026\uffc8\027\uffc8\030\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8" +
    "\040\uffc8\041\uffc8\043\uffc8\045\uffc8\046\uffc8\047\uffc8\001" +
    "\002\000\040\011\uffce\026\074\027\100\030\102\031\073" +
    "\032\076\033\075\034\uffce\035\uffce\036\077\037\101\043" +
    "\uffce\045\uffce\046\uffce\047\uffce\001\002\000\016\003\065" +
    "\007\062\010\063\023\064\024\056\042\070\001\002\000" +
    "\004\043\072\001\002\000\044\011\uffc7\026\uffc7\027\uffc7" +
    "\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\036" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\045\uffc7\046\uffc7" +
    "\047\uffc7\001\002\000\016\003\065\007\062\010\063\023" +
    "\064\024\056\042\070\001\002\000\016\003\065\007\062" +
    "\010\063\023\064\024\056\042\070\001\002\000\016\003" +
    "\065\007\062\010\063\023\064\024\056\042\070\001\002" +
    "\000\016\003\065\007\062\010\063\023\064\024\056\042" +
    "\070\001\002\000\016\003\065\007\062\010\063\023\064" +
    "\024\056\042\070\001\002\000\016\003\065\007\062\010" +
    "\063\023\064\024\056\042\070\001\002\000\016\003\065" +
    "\007\062\010\063\023\064\024\056\042\070\001\002\000" +
    "\016\003\065\007\062\010\063\023\064\024\056\042\070" +
    "\001\002\000\024\011\uffd1\034\uffd1\035\uffd1\036\077\037" +
    "\101\043\uffd1\045\uffd1\046\uffd1\047\uffd1\001\002\000\044" +
    "\011\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\035\uffcc\036\uffcc\037\uffcc\040\106\041\105" +
    "\043\uffcc\045\uffcc\046\uffcc\047\uffcc\001\002\000\016\003" +
    "\065\007\062\010\063\023\064\024\056\042\070\001\002" +
    "\000\016\003\065\007\062\010\063\023\064\024\056\042" +
    "\070\001\002\000\044\011\uffca\026\uffca\027\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037" +
    "\uffca\040\uffca\041\uffca\043\uffca\045\uffca\046\uffca\047\uffca" +
    "\001\002\000\044\011\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\043\uffc9\045\uffc9\046\uffc9\047\uffc9\001" +
    "\002\000\024\011\uffd2\034\uffd2\035\uffd2\036\077\037\101" +
    "\043\uffd2\045\uffd2\046\uffd2\047\uffd2\001\002\000\044\011" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd" +
    "\034\uffcd\035\uffcd\036\uffcd\037\uffcd\040\106\041\105\043" +
    "\uffcd\045\uffcd\046\uffcd\047\uffcd\001\002\000\024\011\uffd4" +
    "\034\uffd4\035\uffd4\036\077\037\101\043\uffd4\045\uffd4\046" +
    "\uffd4\047\uffd4\001\002\000\024\011\uffcf\034\uffcf\035\uffcf" +
    "\036\077\037\101\043\uffcf\045\uffcf\046\uffcf\047\uffcf\001" +
    "\002\000\024\011\uffd0\034\uffd0\035\uffd0\036\077\037\101" +
    "\043\uffd0\045\uffd0\046\uffd0\047\uffd0\001\002\000\024\011" +
    "\uffd3\034\uffd3\035\uffd3\036\077\037\101\043\uffd3\045\uffd3" +
    "\046\uffd3\047\uffd3\001\002\000\016\003\065\007\062\010" +
    "\063\023\064\024\056\042\070\001\002\000\016\003\065" +
    "\007\062\010\063\023\064\024\056\042\070\001\002\000" +
    "\014\011\uffd7\043\uffd7\045\uffd7\046\uffd7\047\uffd7\001\002" +
    "\000\014\011\uffd6\043\uffd6\045\uffd6\046\uffd6\047\uffd6\001" +
    "\002\000\004\023\124\001\002\000\004\025\136\001\002" +
    "\000\004\047\126\001\002\000\016\003\065\007\062\010" +
    "\063\023\064\024\056\042\070\001\002\000\004\047\130" +
    "\001\002\000\004\023\124\001\002\000\004\043\132\001" +
    "\002\000\022\003\041\004\034\006\035\015\047\016\045" +
    "\021\030\022\036\023\037\001\002\000\004\047\134\001" +
    "\002\000\024\003\041\004\034\006\035\013\135\015\047" +
    "\016\045\021\030\022\036\023\037\001\002\000\004\047" +
    "\uffe4\001\002\000\016\003\065\007\062\010\063\023\140" +
    "\024\056\042\070\001\002\000\006\043\uffe3\047\uffe3\001" +
    "\002\000\040\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3" +
    "\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041" +
    "\uffc3\042\142\043\uffc3\047\uffc3\001\002\000\006\043\uffe2" +
    "\047\uffe2\001\002\000\020\003\065\007\062\010\063\023" +
    "\064\024\056\042\070\043\145\001\002\000\006\043\uffd8" +
    "\046\uffd8\001\002\000\006\043\146\046\147\001\002\000" +
    "\006\043\uffe0\047\uffe0\001\002\000\006\043\uffe1\047\uffe1" +
    "\001\002\000\016\003\065\007\062\010\063\023\064\024" +
    "\056\042\070\001\002\000\006\043\uffd9\046\uffd9\001\002" +
    "\000\024\003\041\004\034\006\035\013\152\015\047\016" +
    "\045\021\030\022\036\023\037\001\002\000\010\004\ufff7" +
    "\005\ufff7\014\ufff7\001\002\000\004\047\uffde\001\002\000" +
    "\004\011\155\001\002\000\022\003\041\004\034\006\035" +
    "\015\047\016\045\021\030\022\036\023\037\001\002\000" +
    "\004\047\157\001\002\000\026\003\041\004\034\006\035" +
    "\012\160\013\161\015\047\016\045\021\030\022\036\023" +
    "\037\001\002\000\022\003\041\004\034\006\035\015\047" +
    "\016\045\021\030\022\036\023\037\001\002\000\004\047" +
    "\uffe7\001\002\000\004\047\163\001\002\000\024\003\041" +
    "\004\034\006\035\013\164\015\047\016\045\021\030\022" +
    "\036\023\037\001\002\000\004\047\uffe6\001\002\000\010" +
    "\044\171\046\uffda\047\uffda\001\002\000\006\046\167\047" +
    "\uffdc\001\002\000\004\023\170\001\002\000\006\046\uffdb" +
    "\047\uffdb\001\002\000\016\003\065\007\062\010\063\023" +
    "\064\024\056\042\070\001\002\000\004\045\173\001\002" +
    "\000\004\047\uffdd\001\002\000\004\047\uffdf\001\002\000" +
    "\022\003\041\004\034\006\035\015\047\016\045\021\030" +
    "\022\036\023\037\001\002\000\004\047\177\001\002\000" +
    "\024\003\041\004\034\006\035\013\200\015\047\016\045" +
    "\021\030\022\036\023\037\001\002\000\010\004\ufff6\005" +
    "\ufff6\014\ufff6\001\002\000\004\042\202\001\002\000\006" +
    "\004\020\043\203\001\002\000\004\014\215\001\002\000" +
    "\006\043\205\046\023\001\002\000\004\014\206\001\002" +
    "\000\022\003\041\004\034\006\035\015\047\016\045\021" +
    "\030\022\036\023\037\001\002\000\004\047\210\001\002" +
    "\000\024\003\041\004\034\006\035\015\047\016\045\020" +
    "\211\021\030\022\036\023\037\001\002\000\016\003\065" +
    "\007\062\010\063\023\064\024\056\042\070\001\002\000" +
    "\004\047\213\001\002\000\004\013\214\001\002\000\010" +
    "\004\ufff9\005\ufff9\014\ufff9\001\002\000\022\003\041\004" +
    "\034\006\035\015\047\016\045\021\030\022\036\023\037" +
    "\001\002\000\004\047\217\001\002\000\024\003\041\004" +
    "\034\006\035\015\047\016\045\020\220\021\030\022\036" +
    "\023\037\001\002\000\016\003\065\007\062\010\063\023" +
    "\064\024\056\042\070\001\002\000\004\047\222\001\002" +
    "\000\004\013\223\001\002\000\010\004\ufff8\005\ufff8\014" +
    "\ufff8\001\002\000\004\047\225\001\002\000\024\003\041" +
    "\004\034\006\035\013\226\015\047\016\045\021\030\022" +
    "\036\023\037\001\002\000\004\002\ufffe\001\002\000\022" +
    "\003\041\004\034\006\035\015\047\016\045\021\030\022" +
    "\036\023\037\001\002\000\010\004\ufffc\005\ufffc\014\ufffc" +
    "\001\002\000\010\004\ufffd\005\ufffd\014\ufffd\001\002\000" +
    "\004\047\233\001\002\000\024\003\041\004\034\006\035" +
    "\013\234\015\047\016\045\021\030\022\036\023\037\001" +
    "\002\000\004\002\uffff\001\002\000\004\002\000\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\233\000\014\002\003\003\007\004\004\022\010\023" +
    "\006\001\001\000\002\001\001\000\006\022\230\023\227" +
    "\001\001\000\030\005\223\006\050\007\041\010\026\011" +
    "\042\012\047\013\031\014\043\015\030\016\045\021\032" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\005\037\006\050\007\041\010\026\011\042\012\047" +
    "\013\031\014\043\015\030\016\045\021\032\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\165\001\001\000" +
    "\014\025\060\026\153\027\066\030\057\031\065\001\001" +
    "\000\014\025\060\026\152\027\066\030\057\031\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\051\006\050" +
    "\007\041\010\026\011\042\012\047\013\031\014\043\015" +
    "\030\016\045\021\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\006\054\007\041\010" +
    "\026\011\042\012\047\013\031\014\043\015\030\016\045" +
    "\021\032\001\001\000\014\025\060\026\056\027\066\030" +
    "\057\031\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\025" +
    "\060\026\070\027\066\030\057\031\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\027\115\030\057\031" +
    "\065\001\001\000\010\027\114\030\057\031\065\001\001" +
    "\000\010\027\113\030\057\031\065\001\001\000\010\027" +
    "\112\030\057\031\065\001\001\000\006\030\111\031\065" +
    "\001\001\000\010\027\110\030\057\031\065\001\001\000" +
    "\006\030\103\031\065\001\001\000\010\027\102\030\057" +
    "\031\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\031\107\001\001\000\004\031\106\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\025\121\027\066\030\057\031" +
    "\065\001\001\000\012\025\120\027\066\030\057\031\065" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\124\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\025\060\026\126\027\066\030\057\031\065\001\001\000" +
    "\002\001\001\000\004\012\130\001\001\000\002\001\001" +
    "\000\030\005\132\006\050\007\041\010\026\011\042\012" +
    "\047\013\031\014\043\015\030\016\045\021\032\001\001" +
    "\000\002\001\001\000\026\006\054\007\041\010\026\011" +
    "\042\012\047\013\031\014\043\015\030\016\045\021\032" +
    "\001\001\000\002\001\001\000\016\021\140\025\060\026" +
    "\136\027\066\030\057\031\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\020\143\025" +
    "\060\026\142\027\066\030\057\031\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\025\060\026\147\027\066\030\057\031\065" +
    "\001\001\000\002\001\001\000\026\006\054\007\041\010" +
    "\026\011\042\012\047\013\031\014\043\015\030\016\045" +
    "\021\032\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\005\155\006\050\007\041\010\026" +
    "\011\042\012\047\013\031\014\043\015\030\016\045\021" +
    "\032\001\001\000\002\001\001\000\026\006\054\007\041" +
    "\010\026\011\042\012\047\013\031\014\043\015\030\016" +
    "\045\021\032\001\001\000\030\005\161\006\050\007\041" +
    "\010\026\011\042\012\047\013\031\014\043\015\030\016" +
    "\045\021\032\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\054\007\041\010\026\011\042\012\047\013" +
    "\031\014\043\015\030\016\045\021\032\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\025\060\026\171\027\066" +
    "\030\057\031\065\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\005\175\006\050\007\041" +
    "\010\026\011\042\012\047\013\031\014\043\015\030\016" +
    "\045\021\032\001\001\000\002\001\001\000\026\006\054" +
    "\007\041\010\026\011\042\012\047\013\031\014\043\015" +
    "\030\016\045\021\032\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\203\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\005\206\006\050" +
    "\007\041\010\026\011\042\012\047\013\031\014\043\015" +
    "\030\016\045\021\032\001\001\000\002\001\001\000\026" +
    "\006\054\007\041\010\026\011\042\012\047\013\031\014" +
    "\043\015\030\016\045\021\032\001\001\000\004\031\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\005\215\006\050\007\041\010\026\011\042" +
    "\012\047\013\031\014\043\015\030\016\045\021\032\001" +
    "\001\000\002\001\001\000\026\006\054\007\041\010\026" +
    "\011\042\012\047\013\031\014\043\015\030\016\045\021" +
    "\032\001\001\000\004\031\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\006\054\007\041\010\026\011\042\012\047\013\031" +
    "\014\043\015\030\016\045\021\032\001\001\000\002\001" +
    "\001\000\030\005\231\006\050\007\041\010\026\011\042" +
    "\012\047\013\031\014\043\015\030\016\045\021\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\006\054\007\041\010\026\011\042\012\047\013" +
    "\031\014\043\015\030\016\045\021\032\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private boolean errores=false;

public boolean gethayerrores(){
		return errores;
	}

	public void syntax_error(Symbol s){
System.err.println("[ERROR sintactico] token inesperado, Linea:"+(s.right+1));
errores=true;
}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("[ERROR sintactico] token inesperado, Linea:"+(s.right+1));

		errores=true; }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
    private NodoBase hijosub=null;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

	

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // factor ::= error 
            {
              NodoBase RESULT =null;
		
								 RESULT=null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // factor ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla variable"); 
								
								 if(variable!=null){
									RESULT= new NodoIdentificador(variable.toString());		
								}else{
									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} 

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // factor ::= FALSE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla false"); 	


									RESULT= new NodoIdentificador("false");		
								
									
								 							
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // factor ::= TRUE 
            {
              NodoBase RESULT =null;
		 if(modoDepuracion) System.out.println("\t regla verdadero"); 	


								
									RESULT= new NodoIdentificador("true");		
															
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // factor ::= NUM 
            {
              NodoBase RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla numero"); 
								
								  if(valor!=null)
										RESULT= new NodoValor(valor);					
								    else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0005");
									} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // factor ::= LPAREN exp_seq RPAREN 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t regla en parentesis"); 
								 RESULT = ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // term ::= factor 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
								  RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // term ::= term OVER factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla division"); 
								  RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // term ::= term TIMES factor 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla por"); 
								 RESULT = new NodoOperacion(exI,tipoOp.por,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simple_exp ::= term 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 

							RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // simple_exp ::= simple_exp MINUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla menos"); 
									RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // simple_exp ::= simple_exp PLUS term 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla mas"); 
								RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("simple_exp",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // exp ::= simple_exp 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
							    RESULT=ex;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // exp ::= simple_exp DIFF simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla diferente"); 
								RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // exp ::= simple_exp EQ simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla igual"); 
								RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exp ::= simple_exp GE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla mayor o igual"); 
								RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exp ::= simple_exp LE simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla menor o igual"); 
								 RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // exp ::= simple_exp LT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla menor que"); 
								 RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= simple_exp GT simple_exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla mayor que"); 
								 RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_seq ::= exp 
            {
              NodoBase RESULT =null;
		int sdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sd = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					    RESULT=sd;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_seq ::= exp AND exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(modoDepuracion) System.out.println("\t regla and");
					 RESULT = new NodoOperacion(exI,tipoOp.and,exD);
				
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_seq ::= exp OR exp 
            {
              NodoBase RESULT =null;
		int exIleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exIright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase exI = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exDleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exDright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase exD = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
					if(modoDepuracion) System.out.println("\t regla or");
					 RESULT = new NodoOperacion(exI,tipoOp.or,exD);
				
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_seq",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // param_summon ::= exp_seq 
            {
              NodoBase RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expresion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla seq expresion sola");
                               
								RESULT=expresion;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_summon",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // param_summon ::= param_summon COLOM exp_seq 
            {
              NodoBase RESULT =null;
		int seqexpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seqexpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase seqexp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase expresion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla seqexpresion");

							 NodoBase hijoSummon = seqexp;
						
							if(hijoSummon !=null){
									
									while(hijoSummon.TieneHermano()){

										hijoSummon = hijoSummon.getHermanoDerecha();
									}

									hijoSummon.setHermanoDerecha(expresion);
									RESULT=seqexp;
							}
							else{
									RESULT=expresion;
							} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_summon",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // seq_variable ::= ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla variable");

							 if(variable!=null){
									RESULT= new NodoIdentificador(variable.toString());		
								}else{
									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // seq_variable ::= seq_variable COLOM ID 
            {
              NodoBase RESULT =null;
		int seqvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int seqvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase seqvar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla seqvariable");

							 NodoBase hijoSeq = seqvar;
						
							if(hijoSeq !=null){
									
									while(hijoSeq.TieneHermano()){

										hijoSeq = hijoSeq.getHermanoDerecha();
									}

									hijoSeq.setHermanoDerecha(new NodoIdentificador(variable.toString()));
									RESULT=seqvar;
							}
							else{
									 if(variable!=null){
									RESULT= new NodoIdentificador(variable.toString());		
								

								
								} 
							} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq_variable",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // declare_stmt ::= TipoDato seq_variable 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int seqvarleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int seqvarright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase seqvar = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla declarestmt"); 
								
								if(seqvar!=null)
									RESULT = new NodoDeclaracion(v,seqvar,vleft,vright); 
								  else{
									RESULT = null;
								 	System.out.println("Ocurrio error en cup # 0002");
								  } 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // declare_stmt_vec ::= TipoDato ID LCOR exp_seq RCOR 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase vec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 if(modoDepuracion) System.out.println("\t declarestmtvec"); 
								
								 	if(vec!=null)
									RESULT = new NodoDeclaracion(v,new NodoIdentificador(variable.toString()),vec,variableleft,variableright); 
								  else{
									RESULT = null;
								 	System.out.println("Ocurrio error en cup # 0002");
								  } 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declare_stmt_vec",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // write_stmt ::= WRITE exp_seq 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla writestmt"); 
							RESULT= new NodoEscribir(ex);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("write_stmt",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // read_stmt ::= READ ID 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  if(modoDepuracion) System.out.println("\t regla readstmt"); 
								
								  if(variable!=null)
										RESULT = new NodoLeer(variable.toString());
									else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0002");
									} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("read_stmt",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // summon ::= ID LPAREN RPAREN 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
								if(modoDepuracion) System.out.println("\t regla summon subprogram vacio"); 

								RESULT= new NodoSummon(func_nombre);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("summon",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // summon ::= ID LPAREN param_summon RPAREN 
            {
              NodoBase RESULT =null;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
								if(modoDepuracion) 
								System.out.println("\t regla summon subprogram con parametros"); 

								RESULT= new NodoSummon(func_nombre, parametros);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("summon",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // assign_stmt ::= ID ASSIGN summon 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int suleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int suright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase su = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
								if(modoDepuracion) 
								System.out.println("\t regla summon con asignacion");
								RESULT = new NodoAsignacion(variable.toString(),su); 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // assign_stmt ::= ID ASSIGN exp_seq 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla assig final");
								
								 if(variable!=null)
									{

									RESULT = new NodoAsignacion(variable.toString(),ex);				
											}
								   else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0001");
									} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign_stmt",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // for_stmt ::= FOR LPAREN assign_stmt SEMI exp_seq SEMI assign_stmt RPAREN stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase variable = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int condicionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int condicionright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		NodoBase condicion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int incrementoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int incrementoright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase incremento = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
							if(modoDepuracion) System.out.println("\t regla for"); 

								if(variable!=null)
									{

									RESULT = new NodoFor(variable,condicion,incremento, cuerpo);				
											
											}
								   else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0001");
									} 

					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("for_stmt",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // repeat_stmt ::= REPEAT stmt_seq SEMI UNTIL exp_seq 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pruebaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pruebaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase prueba = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla repeat"); 
					RESULT = new NodoRepeat(cuerpo,prueba);
							
              CUP$parser$result = parser.getSymbolFactory().newSymbol("repeat_stmt",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // if_stmt ::= IF exp_seq THEN stmt_seq SEMI ELSE stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pelseleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pelseright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pelse = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t regla if else"); 
					 RESULT = new NodoIf(ex,pthen,pelse);		
			
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // if_stmt ::= IF exp_seq THEN stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase ex = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pthenleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pthenright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase pthen = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t regla if"); 
				 RESULT = new NodoIf(ex,pthen);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("if_stmt",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // stmt ::= error 
            {
              NodoBase RESULT =null;
		
								 RESULT=null;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // stmt ::= declare_stmt_vec 
            {
              NodoBase RESULT =null;
		int sdecvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdecvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sdecv = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla 					declarestmtvec"); 
							 RESULT=sdecv;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= declare_stmt 
            {
              NodoBase RESULT =null;
		int sdecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sdecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sdec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla declarestmt"); 
							RESULT=sdec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= write_stmt 
            {
              NodoBase RESULT =null;
		int sescleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sescright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sesc = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla writestmt"); 
							 RESULT=sesc;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= read_stmt 
            {
              NodoBase RESULT =null;
		int slecleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int slecright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase slec = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla readstmt"); 
							RESULT=slec;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= assign_stmt 
            {
              NodoBase RESULT =null;
		int sasileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sasiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sasi = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla assig"); 
							 RESULT=sasi;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= for_stmt 
            {
              NodoBase RESULT =null;
		int sforleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sforright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sfor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla for"); 
						 RESULT=sfor;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= repeat_stmt 
            {
              NodoBase RESULT =null;
		int srepleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int srepright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase srep = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla repeat"); 
						RESULT=srep;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= if_stmt 
            {
              NodoBase RESULT =null;
		int sifleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sifright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sif = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla if"); 
					RESULT=sif;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= summon 
            {
              NodoBase RESULT =null;
		int llamadaSubprogramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int llamadaSubprogramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase llamadaSubprogram = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla   summonSubprogram"); 
							 RESULT=llamadaSubprogram;				
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt_seq ::= stmt 
            {
              NodoBase RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmt"); 
							 RESULT=sent;				
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt_seq ::= stmt_seq SEMI stmt 
            {
              NodoBase RESULT =null;
		int inileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase ini = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase sent = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla stmtseq"); 
							 NodoBase hijoActual = ini;
						
							if(hijoActual !=null){
									
									while(hijoActual.TieneHermano()){

										hijoActual = hijoActual.getHermanoDerecha();
									}

									hijoActual.setHermanoDerecha(sent);
									RESULT=ini;
							}
							else{
									RESULT=sent;
							} 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt_seq",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_cast ::= TipoDato ID 
            {
              NodoBase RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

								if(variable!=null)
								{
									RESULT= new NodoDeclaracion(v,new NodoIdentificador(variable.toString()),variableleft,variableright);	

								}
								else
								{

									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} 
						
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_cast",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // param_cast ::= param_cast COLOM TipoDato ID 
            {
              NodoBase RESULT =null;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int variableleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int variableright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String variable = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 NodoBase hijoParam = parametros;
						
							if(hijoParam !=null)
							{
									
									while(hijoParam.TieneHermano()){

										hijoParam = hijoParam.getHermanoDerecha();
									}

									hijoParam.setHermanoDerecha(new NodoDeclaracion(v,new NodoIdentificador(variable.toString()),variableleft,variableright));
									RESULT=parametros;
							}
							else
							{
									 if(variable!=null){
										RESULT= new NodoDeclaracion(v,new NodoIdentificador(variable.toString()),variableleft,variableright);
									} 
							} 			
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("param_cast",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // proc_cast ::= VOID ID LPAREN RPAREN BEGIN stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int proc_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int proc_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String proc_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					RESULT=new NodoSub("void",new NodoIdentificador(proc_nombre.toString()),null,cuerpo,null,proc_nombreleft);
                    

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_cast",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // proc_cast ::= VOID ID LPAREN param_cast RPAREN BEGIN stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int proc_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int proc_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		String proc_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

					RESULT=new NodoSub("void",new NodoIdentificador(proc_nombre.toString()),parametros,cuerpo,null,proc_nombreleft);


				 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("proc_cast",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // func_cast ::= TipoDato ID LPAREN RPAREN BEGIN stmt_seq SEMI RETURN factor SEMI END 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                             RESULT=new NodoSub(tipo,new NodoIdentificador(func_nombre.toString()),null,cuerpo,valor,func_nombreleft);

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_cast",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // func_cast ::= TipoDato ID LPAREN param_cast RPAREN BEGIN stmt_seq SEMI RETURN factor SEMI END 
            {
              NodoBase RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-11)).value;
		int func_nombreleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int func_nombreright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		String func_nombre = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int parametrosleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int parametrosright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		NodoBase parametros = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase valor = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 if(modoDepuracion) System.out.println("\t regla funcion");


						    RESULT=new NodoSub(tipo,new NodoIdentificador(func_nombre.toString()),parametros,cuerpo,valor,func_nombreleft);
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func_cast",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // sub_program ::= proc_cast 
            {
              NodoBase RESULT =null;
		int pcastleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pcastright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase pcast = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla procedimiento"); 
					
							RESULT=pcast;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // sub_program ::= func_cast 
            {
              NodoBase RESULT =null;
		int fcastleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcastright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase fcast = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion"); 
					
							RESULT=fcast;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // sub_program ::= sub_program proc_cast 
            {
              NodoBase RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sub = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int primerprocesoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primerprocesoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase primerproceso = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla proc arriba");
						

						    NodoBase hijosub=sub;
							if(hijosub !=null)
							{
									
									while(hijosub.TieneHermano()){

										hijosub = hijosub.getHermanoDerecha();
									}

									hijosub.setHermanoDerecha(primerproceso);
									RESULT=sub;
							}
							else
							{
									 if(primerproceso!=null){
										RESULT= primerproceso;
									} 
							} 	 
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sub_program ::= sub_program func_cast 
            {
              NodoBase RESULT =null;
		int subleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int subright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		NodoBase sub = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int primerafuncionleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int primerafuncionright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase primerafuncion = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if(modoDepuracion) System.out.println("\t regla funcion arriba"); 

                           NodoBase hijosub=sub;
							if(hijosub !=null)
							{
									
									while(hijosub.TieneHermano()){

										hijosub = hijosub.getHermanoDerecha();
									}

									hijosub.setHermanoDerecha(primerafuncion);
									RESULT=sub;
							}
							else
							{
									 if(primerafuncion!=null){
										RESULT= primerafuncion;
									} 
							} 	
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sub_program",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // principal ::= BEGIN stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
						 RESULT=new NodoSub(null,null,null,cuerpo,null,cuerpoleft-1);
				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // principal ::= sub_program BEGIN stmt_seq SEMI END 
            {
              NodoBase RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		NodoBase sp = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cuerpoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cuerporight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		NodoBase cuerpo = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		

					if(sp !=null)
							{	NodoBase aux=sp;
								while(aux.TieneHermano()){

										aux = aux.getHermanoDerecha();
									}

									aux.setHermanoDerecha(new NodoSub(null,null,null,cuerpo,null,cuerpoleft-1));
								    RESULT=sp;
						  }

				
              CUP$parser$result = parser.getSymbolFactory().newSymbol("principal",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= principal 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		NodoBase s = (NodoBase)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if(modoDepuracion) System.out.println("\t regla root"); 
										
										ast = s;
					
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

