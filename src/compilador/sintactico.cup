package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=false;
	private NodoBase ast=null;
	private int lineanum=0;
    private NodoBase hijosub=null;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}

	
:}

parser code {:
    private boolean errores=false;

public boolean gethayerrores(){
		return errores;
	}

	public void syntax_error(Symbol s){
System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );
errores=true;
}

public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
		System.err.println("[ERROR sintactico] token:" + s.value+" inesperado, Linea:"+(s.right+1) +" Columna:"+s.left+ "" );

		errores=true; }
:}

/* Simbolos Terminales */

terminal String TipoDato;
terminal VOID;
terminal IF;
terminal BOOLEAN TRUE;
terminal BOOLEAN FALSE;
terminal THEN;
terminal ELSE;
terminal END;
terminal BEGIN;
terminal REPEAT;
terminal FOR;
terminal UNTIL;
terminal RETURN;
terminal READ;
terminal WRITE;
terminal String ID;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LE;
terminal GE;
terminal LT;
terminal GT;
terminal DIFF;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal LCOR;
terminal RCOR;
terminal COLOM;
terminal SEMI;

/* Simbolos No Terminales */
non terminal program;
non terminal NodoBase principal;
non terminal NodoBase sub_program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase declare_stmt;
non terminal NodoBase declare_stmt_vec;
non terminal NodoBase seq_variable;
non terminal NodoBase param_summon;
non terminal NodoBase summon;
non terminal NodoBase func_cast;
non terminal NodoBase proc_cast;
non terminal NodoBase param_cast;
non terminal NodoBase exp;
non terminal NodoBase exp_seq;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left ID;


/* REGLAS GRAMATICALES */


program      ::= principal:s 

						{:if(modoDepuracion) System.out.println("\t regla root"); 
										
										ast = s;
					:}
;


principal    ::= sub_program:sp BEGIN stmt_seq:cuerpo SEMI END 

				{:

					if(sp !=null)
							{	NodoBase aux=sp;
								while(aux.TieneHermano()){

										aux = aux.getHermanoDerecha();
									}

									aux.setHermanoDerecha(new NodoSub(null,null,null,cuerpo,null));
								    RESULT=sp;
						  }

				:}

				| BEGIN stmt_seq:cuerpo SEMI END

				{:
						 RESULT=new NodoSub(null,null,null,cuerpo,null);
				:}

					
;


sub_program	 ::= sub_program:sub func_cast:primerafuncion 

						{: if(modoDepuracion) System.out.println("\t regla funcion arriba"); 

                           NodoBase hijosub=sub;
							if(hijosub !=null)
							{
									
									while(hijosub.TieneHermano()){

										hijosub = hijosub.getHermanoDerecha();
									}

									hijosub.setHermanoDerecha(primerafuncion);
									RESULT=sub;
							}
							else
							{
									 if(primerafuncion!=null){
										RESULT= primerafuncion;
									} 
							} 	
					:}
			
				| sub_program:sub proc_cast:primerproceso 

						{: if(modoDepuracion) System.out.println("\t regla proc arriba");
						

						    NodoBase hijosub=sub;
							if(hijosub !=null)
							{
									
									while(hijosub.TieneHermano()){

										hijosub = hijosub.getHermanoDerecha();
									}

									hijosub.setHermanoDerecha(primerproceso);
									RESULT=sub;
							}
							else
							{
									 if(primerproceso!=null){
										RESULT= primerproceso;
									} 
							} 	 
					:}
			
				| func_cast  : fcast 
						{: if(modoDepuracion) System.out.println("\t regla funcion"); 
					
							RESULT=fcast;
					:} 

				| proc_cast	: pcast	
						{: if(modoDepuracion) System.out.println("\t regla procedimiento"); 
					
							RESULT=pcast;
					:}
	;


func_cast	 ::= TipoDato:tipo ID:func_nombre LPAREN param_cast:parametros RPAREN BEGIN stmt_seq:cuerpo SEMI RETURN factor:valor SEMI END 
					{: if(modoDepuracion) System.out.println("\t regla funcion");


						    RESULT=new NodoSub(tipo,new NodoIdentificador(func_nombre.toString()),parametros,cuerpo,valor);
					:}

				| TipoDato:tipo ID:func_nombre LPAREN RPAREN BEGIN stmt_seq:cuerpo SEMI RETURN factor:valor SEMI END 

				{:
                             RESULT=new NodoSub(tipo,new NodoIdentificador(func_nombre.toString()),null,cuerpo,valor);

				:}
;


proc_cast	::= VOID ID:proc_nombre LPAREN param_cast:parametros RPAREN BEGIN 						stmt_seq:cuerpo SEMI END 
				 {:

					RESULT=new NodoSub("void",new NodoIdentificador(proc_nombre.toString()),parametros,cuerpo,null);


				 :}
				
				| VOID ID:proc_nombre LPAREN RPAREN BEGIN stmt_seq:cuerpo SEMI  END

				{:
					RESULT=new NodoSub("void",new NodoIdentificador(proc_nombre.toString()),null,cuerpo,null);
                    

				:}

;

param_cast	::= param_cast:parametros COLOM TipoDato:v ID:variable
				  
				  {: NodoBase hijoParam = parametros;
						
							if(hijoParam !=null)
							{
									
									while(hijoParam.TieneHermano()){

										hijoParam = hijoParam.getHermanoDerecha();
									}

									hijoParam.setHermanoDerecha(new NodoDeclaracion(v,new NodoIdentificador(variable.toString())));
									RESULT=parametros;
							}
							else
							{
									 if(variable!=null){
										RESULT= new NodoDeclaracion(v,new NodoIdentificador(variable.toString()));
									} 
							} 			
				:}

				| TipoDato:v ID:variable
						{:

								if(variable!=null)
								{
									RESULT= new NodoDeclaracion(v,new NodoIdentificador(variable.toString()));	

								}
								else
								{

									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} 
						:}


;


stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	
						
						{: if(modoDepuracion) System.out.println("\t regla stmtseq"); 
							 NodoBase hijoActual = ini;
						
							if(hijoActual !=null){
									
									while(hijoActual.TieneHermano()){

										hijoActual = hijoActual.getHermanoDerecha();
									}

									hijoActual.setHermanoDerecha(sent);
									RESULT=ini;
							}
							else{
									RESULT=sent;
							} 
					:}  		
            
            	| stmt:sent	
            			{: if(modoDepuracion) System.out.println("\t regla stmt"); 
							 RESULT=sent;				
					:} 			
;


stmt        ::= summon:llamadaSubprogram	
						{: if(modoDepuracion) System.out.println("\t regla   summonSubprogram"); 
							 RESULT=llamadaSubprogram;				
					:}
			
				| if_stmt:sif 	{: if(modoDepuracion) System.out.println("\t regla if"); 
					RESULT=sif;
					:}

				| repeat_stmt:srep	{: if(modoDepuracion) System.out.println("\t regla repeat"); 
						RESULT=srep;
					:}

				| for_stmt:sfor	{: if(modoDepuracion) System.out.println("\t regla for"); 
						 RESULT=sfor;
					:}

				| assign_stmt:sasi	
						{: if(modoDepuracion) System.out.println("\t regla assig"); 
							 RESULT=sasi;
					:}

            	| read_stmt:slec	
            				{: if(modoDepuracion) System.out.println("\t regla readstmt"); 
							RESULT=slec;
					:}

            	| write_stmt:sesc	
            				{: if(modoDepuracion) System.out.println("\t regla writestmt"); 
							 RESULT=sesc;
					:}

				| declare_stmt:sdec	
							{: if(modoDepuracion) System.out.println("\t regla declarestmt"); 
							RESULT=sdec;
					:}

				| declare_stmt_vec:sdecv	
							{: if(modoDepuracion) System.out.println("\t regla 					declarestmtvec"); 
							 RESULT=sdecv;
					:}
						| error	
            			{:
								 RESULT=null;
					:}

            

;



if_stmt     ::= IF exp_seq:ex THEN stmt_seq:pthen SEMI END
							{: if(modoDepuracion) System.out.println("\t regla if"); 
				 RESULT = new NodoIf(ex,pthen);
					:}

				| IF exp_seq:ex THEN stmt_seq:pthen SEMI ELSE stmt_seq:pelse SEMI END	{: if(modoDepuracion) System.out.println("\t regla if else"); 
					 RESULT = new NodoIf(ex,pthen,pelse);		
			:}
;


repeat_stmt ::= REPEAT stmt_seq:cuerpo SEMI UNTIL exp_seq:prueba	{: if(modoDepuracion) System.out.println("\t regla repeat"); 
					RESULT = new NodoRepeat(cuerpo,prueba);
							:}
;

for_stmt	::= FOR LPAREN assign_stmt:variable SEMI exp_seq:condicion SEMI assign_stmt:incremento RPAREN stmt_seq:cuerpo SEMI END
						{:
							if(modoDepuracion) System.out.println("\t regla for"); 

								if(variable!=null)
									{

									RESULT = new NodoFor(variable,condicion,incremento, cuerpo);				
											
											}
								   else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0001");
									} 

					:}
;

assign_stmt ::= ID:variable ASSIGN exp_seq:ex	
							{: if(modoDepuracion) System.out.println("\t regla assig final");
								
								 if(variable!=null)
									{

									RESULT = new NodoAsignacion(variable.toString(),ex);				
											}
								   else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0001");
									} 
					:}

				| ID:variable ASSIGN summon:su {:
								if(modoDepuracion) 
								System.out.println("\t regla summon con asignacion");
								RESULT = new NodoAsignacion(variable.toString(),su); 
					:}
	




; 


summon	::= ID:func_nombre LPAREN param_summon:parametros RPAREN 
							{:
								if(modoDepuracion) 
								System.out.println("\t regla summon subprogram con parametros"); 

								RESULT= new NodoSummon(func_nombre, parametros);
					:}
			
			| ID:func_nombre LPAREN RPAREN 
							{:
								if(modoDepuracion) System.out.println("\t regla summon subprogram vacio"); 

								RESULT= new NodoSummon(func_nombre);
					:}
		    
;


read_stmt   ::= READ ID:variable	
							{:  if(modoDepuracion) System.out.println("\t regla readstmt"); 
								
								  if(variable!=null)
										RESULT = new NodoLeer(variable.toString());
									else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0002");
									} 
					:}
;


write_stmt  ::= WRITE exp_seq:ex	
							{: if(modoDepuracion) System.out.println("\t regla writestmt"); 
							RESULT= new NodoEscribir(ex);
					:}
;


declare_stmt_vec  ::=  TipoDato:v ID:variable LCOR exp_seq:vec RCOR
							{: if(modoDepuracion) System.out.println("\t declarestmtvec"); 
								
								 	if(vec!=null)
									RESULT = new NodoDeclaracion(v,new NodoIdentificador(variable.toString()),vec); 
								  else{
									RESULT = null;
								 	System.out.println("Ocurrio error en cup # 0002");
								  } 
					:}


;


declare_stmt  ::=  TipoDato:v seq_variable:seqvar 	
							{: if(modoDepuracion) System.out.println("\t regla declarestmt"); 
								
								if(seqvar!=null)
									RESULT = new NodoDeclaracion(v,seqvar); 
								  else{
									RESULT = null;
								 	System.out.println("Ocurrio error en cup # 0002");
								  } 
					:}
	


;


seq_variable	::= seq_variable:seqvar COLOM ID:variable  
							 {:if(modoDepuracion) System.out.println("\t regla seqvariable");

							 NodoBase hijoSeq = seqvar;
						
							if(hijoSeq !=null){
									
									while(hijoSeq.TieneHermano()){

										hijoSeq = hijoSeq.getHermanoDerecha();
									}

									hijoSeq.setHermanoDerecha(new NodoIdentificador(variable.toString()));
									RESULT=seqvar;
							}
							else{
									 if(variable!=null){
									RESULT= new NodoIdentificador(variable.toString());		
								

								
								} 
							} 
					:}
				
					| ID:variable  
							{:if(modoDepuracion) System.out.println("\t regla variable");

							 if(variable!=null){
									RESULT= new NodoIdentificador(variable.toString());		
								}else{
									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} 
					:}

;

param_summon	::= param_summon:seqexp COLOM exp_seq:expresion  
							 {:if(modoDepuracion) System.out.println("\t regla seqexpresion");

							 NodoBase hijoSummon = seqexp;
						
							if(hijoSummon !=null){
									
									while(hijoSummon.TieneHermano()){

										hijoSummon = hijoSummon.getHermanoDerecha();
									}

									hijoSummon.setHermanoDerecha(expresion);
									RESULT=seqexp;
							}
							else{
									RESULT=expresion;
							} 
					:}
				
					| exp_seq:expresion  
							{:if(modoDepuracion) System.out.println("\t regla seq expresion sola");
                               
								RESULT=expresion;
					:}

;

exp_seq			::= exp:exI OR exp:exD	{:
					if(modoDepuracion) System.out.println("\t regla or");
					 RESULT = new NodoOperacion(exI,tipoOp.or,exD);
				
					:}
		| exp:exI AND exp:exD	{:
					if(modoDepuracion) System.out.println("\t regla and");
					 RESULT = new NodoOperacion(exI,tipoOp.and,exD);
				
					:}
		| exp:sd {:
					    RESULT=sd;
					:}
		;

exp         	::= simple_exp:exI GT simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla mayor que"); 
								 RESULT = new NodoOperacion(exI,tipoOp.mayor,exD);
					:} 

					| simple_exp:exI LT simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla menor que"); 
								 RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
					:}

					| simple_exp:exI LE simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla menor o igual"); 
								 RESULT = new NodoOperacion(exI,tipoOp.menorigual,exD);
					:}

					| simple_exp:exI GE simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla mayor o igual"); 
								RESULT = new NodoOperacion(exI,tipoOp.mayorigual,exD);
					:}
					
					| simple_exp:exI EQ simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla igual"); 
								RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					:}
					
					| simple_exp:exI DIFF simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla diferente"); 
								RESULT = new NodoOperacion(exI,tipoOp.diferente,exD);
					:}
					
					| simple_exp:ex	
							{: 
							    RESULT=ex;
					:}
;


simple_exp  ::= simple_exp:exI PLUS term:exD	
							{: if(modoDepuracion) System.out.println("\t regla mas"); 
								RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
					:}

				| simple_exp:exI MINUS term:exD	
							{: if(modoDepuracion) System.out.println("\t regla menos"); 
									RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
					:}

				| term:ex	
							{: 

							RESULT=ex;
					:}
;


term        ::= term:exI TIMES factor:exD
							{: if(modoDepuracion) System.out.println("\t regla por"); 
								 RESULT = new NodoOperacion(exI,tipoOp.por,exD);
					:}

			| term:exI OVER factor:exD
							{: if(modoDepuracion) System.out.println("\t regla division"); 
								  RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
					:}
		
			| factor:ex
							{: 
								  RESULT=ex;
					:}
;


factor      ::= LPAREN exp_seq:ex RPAREN	
							{: if(modoDepuracion) System.out.println("\t regla en parentesis"); 
								 RESULT = ex;
					:}

				
				| NUM:valor
							{: if(modoDepuracion) System.out.println("\t regla numero"); 
								
								  if(valor!=null)
										RESULT= new NodoValor(valor);					
								    else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0005");
									} 
					:}

				| TRUE
							{: if(modoDepuracion) System.out.println("\t regla verdadero"); 	


								
									RESULT= new NodoIdentificador("true");		
															
					:}

				| FALSE
							{: if(modoDepuracion) System.out.println("\t regla false"); 	


									RESULT= new NodoIdentificador("false");		
								
									
								 							
					:}

				| ID:variable	
							{: if(modoDepuracion) System.out.println("\t regla variable"); 
								
								 if(variable!=null){
									RESULT= new NodoIdentificador(variable.toString());		
								}else{
									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} 

					:}

				| error	
            			{:
								 RESULT=null;
					:}

				

;



