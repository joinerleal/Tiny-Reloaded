package compilador;

import java_cup.runtime.*;
import ast.*;

action code {:
	private boolean modoDepuracion=true;
	private NodoBase ast=null;
	private int lineanum=0;
	
	//Debe ser llamada solo despues de un parse(), en caso contrario retornara null siempre;
	public NodoBase getASTroot(){
		return ast;
	}
:}

/* Simbolos Terminales */

terminal String TipoDato;
terminal VOID;
terminal IF;
terminal TRUE;
terminal FALSE;
terminal THEN;
terminal ELSE;
terminal END;
terminal BEGIN;
terminal REPEAT;
terminal FOR;
terminal UNTIL;
terminal READ;
terminal WRITE;
terminal String ID;
terminal String VEC;
terminal Integer NUM;
terminal ASSIGN;
terminal EQ;
terminal LE;
terminal GE;
terminal LT;
terminal GT;
terminal DIFF;
terminal AND;
terminal OR;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal OVER;
terminal LPAREN;
terminal RPAREN;
terminal COLOM;
terminal SEMI;

/* Simbolos No Terminales */
non terminal program;
non terminal principal;
non terminal sub_program;
non terminal NodoBase stmt_seq;
non terminal NodoBase stmt;
non terminal NodoBase if_stmt;
non terminal NodoBase repeat_stmt;
non terminal NodoBase for_stmt;
non terminal NodoBase assign_stmt;
non terminal NodoBase read_stmt;
non terminal NodoBase write_stmt;
non terminal NodoBase declare_stmt;
non terminal NodoBase declare_stmt_vec;
non terminal NodoBase seq_variable;
non terminal NodoBase seq_exp;
non terminal NodoBase summon;
non terminal NodoBase func_cast;
non terminal NodoBase proc_cast;
non terminal NodoBase exp;
non terminal NodoBase exp_seq;
non terminal NodoBase simple_exp;
non terminal NodoBase term;
non terminal NodoBase factor;

/* Precedencia de operadores */
precedence left PLUS;
precedence left MINUS;
precedence left TIMES;
precedence left ID;


/* REGLAS GRAMATICALES */


program      ::= principal:s 

						{:if(modoDepuracion) System.out.println("\t regla root"); 
									//	ast = s;
					:}
;


principal    ::= sub_program:sp BEGIN stmt_seq:cuerpo SEMI END 

				| BEGIN stmt_seq:cuerpo SEMI END	
;


sub_program	 ::= sub_program:sub func_cast:primerafuncion 

						{: if(modoDepuracion) System.out.println("\t regla funcion arriba"); 
					:}
			
				| sub_program:sub proc_cast:primerproceso 

						{: if(modoDepuracion) System.out.println("\t regla proc arriba"); 
					:}
			
				| func_cast     
						{: if(modoDepuracion) System.out.println("\t regla funcion"); 
					:} 

				| proc_cast		
						{: if(modoDepuracion) System.out.println("\t regla procedimiento"); 
					:}
;


func_cast	 ::= TipoDato:tipo ID:func_nombre LPAREN seq_variable:parametros RPAREN BEGIN 					 stmt_seq:cuerpo SEMI END 

				| TipoDato:tipo ID:func_nombre LPAREN RPAREN BEGIN stmt_seq:cuerpo SEMI END 
;


proc_cast	::= VOID ID:func_nombre LPAREN seq_variable:parametros RPAREN BEGIN 							stmt_seq:cuerpo SEMI END 

				| VOID ID:func_nombre LPAREN RPAREN BEGIN stmt_seq:cuerpo SEMI END 
;


stmt_seq    ::= stmt_seq:ini SEMI stmt:sent	
						
						{: if(modoDepuracion) System.out.println("\t regla stmtseq"); 
							/* NodoBase hijoActual = ini;
						
							if(hijoActual !=null){
									
									while(hijoActual.TieneHermano()){

										hijoActual = hijoActual.getHermanoDerecha();
									}

									hijoActual.setHermanoDerecha(sent);
									RESULT=ini;
							}
							else{
									RESULT=sent;
							} */
					:}  		
            
            	| stmt:sent	
            			{: if(modoDepuracion) System.out.println("\t regla stmt"); 
							// RESULT=sent;				
					:} 			
;


stmt        ::= summon:llamadaSubprogram	
						{: if(modoDepuracion) System.out.println("\t regla summonSubprogram"); 
							// RESULT=sent;				
					:}
			
				| assign_stmt:sasi	
						{: if(modoDepuracion) System.out.println("\t regla assig"); 
							// RESULT=sasi;
					:}

            	| read_stmt:slec	
            				{: if(modoDepuracion) System.out.println("\t regla readstmt"); 
							// RESULT=slec;
					:}

            	| write_stmt:sesc	
            				{: if(modoDepuracion) System.out.println("\t regla writestmt"); 
							// RESULT=sesc;
					:}

				| declare_stmt:sdec	
							{: if(modoDepuracion) System.out.println("\t regla declarestmt"); 
							// RESULT=sdec;
					:}

				| declare_stmt_vec:sdecv	
							{: if(modoDepuracion) System.out.println("\t regla 					declarestmtvec"); 
							// RESULT=sdecv;
					:}

            	| error	
            				{: if(modoDepuracion) System.out.println("\t error stmt"); 
								System.out.println("Ocurrio error en cup # 0004");
								// RESULT=null;
					:}
;


assign_stmt ::= ID:variable ASSIGN exp:ex	
							{: if(modoDepuracion) System.out.println("\t regla assig final");
								
								/* if(variable!=null)
										RESULT = new NodoAsignacion(variable.toString(),ex);
								   else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0001");
									} */
					:}

				| ID:variable ASSIGN summon {:
								if(modoDepuracion) 
								System.out.println("\t regla summon con asignacion"); 
					:}

; 


summon	::= ID:func_nombre LPAREN seq_exp:parametros RPAREN 
							{:
								if(modoDepuracion) 
								System.out.println("\t regla summon subprogram con parametros"); 
					:}
			
			| ID:func_nombre LPAREN RPAREN 
							{:
								if(modoDepuracion) System.out.println("\t regla summon subprogram vacio"); 
					:}
		    
;


read_stmt   ::= READ ID:variable	
							{:  if(modoDepuracion) System.out.println("\t regla readstmt"); 
								System.out.println("Leyendo Variable");
								
								  /*if(variable!=null)
										RESULT = new NodoLeer(variable.toString());
									else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0002");
									} */
					:}
;


write_stmt  ::= WRITE exp:ex	
							{: if(modoDepuracion) System.out.println("\t regla writestmt"); 
								// RESULT= new NodoEscribir(ex);
					:}
;


declare_stmt_vec  ::=  TipoDato:v ID:variable VEC:variablevec	
							{: if(modoDepuracion) System.out.println("\t declarestmtvec"); 
								
								  /*if(variable!=null)
									 	RESULT = new NodoLeer(variable.toString()); 
										System.out.println("\t regla 13a exitosa")
									else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0002");
									} */
					:}


;


declare_stmt  ::=  TipoDato:v seq_variable:seqvar 	
							{: if(modoDepuracion) System.out.println("\t regla declarestmt"); 
								
								/*if(variable!=null)
									RESULT = new NodoLeer(variable.toString()); 
									System.out.println("\t regla 13a exitosa");
								  else{
									RESULT = null;
								 	System.out.println("Ocurrio error en cup # 0002");
								  } */
					:}
	


;


seq_variable	::= seq_variable:seqvar COLOM ID:variable  
							 {:if(modoDepuracion) System.out.println("\t regla seqvariable");
					:}
				
					| ID:variable  
							{:if(modoDepuracion) System.out.println("\t regla variable");
					:}

;

seq_exp	::= seq_exp:seqexp COLOM exp:expresion  
							 {:if(modoDepuracion) System.out.println("\t regla seqexpresion");
					:}
				
					| exp:expresion  
							{:if(modoDepuracion) System.out.println("\t regla seq expresion sola");
					:}

;

exp         	::= simple_exp:exI GT simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla 9a"); 
								// RESULT = new NodoOperacion(exI,tipoOp.menor,exD);
					:} 

					| simple_exp:exI LT simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla 9b"); 
								// RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					:}

					| simple_exp:exI LE simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla 9c"); 
								// RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					:}

					| simple_exp:exI GE simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla 9d"); 
								// RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					:}
					
					| simple_exp:exI EQ simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla 9e"); 
								// RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					:}
					
					| simple_exp:exI DIFF simple_exp:exD	
							{: if(modoDepuracion) System.out.println("\t regla 9f"); 
								// RESULT = new NodoOperacion(exI,tipoOp.igual,exD);
					:}
					
					| simple_exp:ex	
							{: if(modoDepuracion) System.out.println("\t regla 9g"); 
								//  RESULT = ex;
					:}
;


simple_exp  ::= simple_exp:exI PLUS term:exD	
							{: if(modoDepuracion) System.out.println("\t regla 10a"); 
								// RESULT = new NodoOperacion(exI,tipoOp.mas,exD);
					:}

				| simple_exp:exI MINUS term:exD	
							{: if(modoDepuracion) System.out.println("\t regla 10b"); 
								// 	RESULT = new NodoOperacion(exI,tipoOp.menos,exD);
					:}

				| term:ex	
							{: if(modoDepuracion) System.out.println("\t regla 10c"); 
								//  RESULT=ex;
					:}
;


term        ::= term:exI TIMES factor:exD
							{: if(modoDepuracion) System.out.println("\t regla 11a"); 
								//  RESULT = new NodoOperacion(exI,tipoOp.por,exD);
					:}

			| term:exI OVER factor:exD
							{: if(modoDepuracion) System.out.println("\t regla 11b"); 
								//  RESULT = new NodoOperacion(exI,tipoOp.entre,exD);
					:}
		
			| factor:ex
							{: if(modoDepuracion) System.out.println("\t regla 11c"); 
								//  RESULT=ex;
					:}
;


factor      ::= LPAREN exp:ex RPAREN	
							{: if(modoDepuracion) System.out.println("\t regla 12a"); 
								// RESULT = ex;
					:}

				| NUM:valor
							{: if(modoDepuracion) System.out.println("\t regla 12b"); 
								
								System.out.println("Devolvi nodo numero entero");
								/*  if(valor!=null)
										RESULT= new NodoValor(valor);					
								    else{
										RESULT = null;
										System.out.println("Ocurrio error en cup # 0005");
									} */
					:}

				| ID:variable	
							{: if(modoDepuracion) System.out.println("\t regla 12c"); 
								
								/* if(variable!=null){
									System.out.println("Construyendo Nodo ID para Lexema: "+ variable.toString());
									RESULT= new NodoIdentificador(variable.toString());		
								}else{
									RESULT = null;
									System.out.println("Ocurrio error en cup # 0005");
								} */
					:}

				| error	
							{:  if(modoDepuracion) System.out.println("\t regla 12d"); 
								System.out.println("Ocurrio error en cup # 0003");
								// RESULT=null;
				:}
;



